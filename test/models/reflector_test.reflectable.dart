// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.
import 'dart:core';
import 'package:maxi_library/src/reflection/decorators/formal_name.dart'
    as prefix5;
import 'package:maxi_library/src/reflection/decorators/primary_key.dart'
    as prefix2;
import 'package:maxi_library/src/reflection/validators/numbers/check_number_range.dart'
    as prefix3;
import 'package:maxi_library/src/reflection/validators/texts/check_text_length.dart'
    as prefix4;
import 'person.dart' as prefix1;
import 'reflector_test.dart' as prefix0;

// ignore_for_file: camel_case_types
// ignore_for_file: implementation_imports
// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const
// ignore_for_file: unused_import

import 'package:reflectable/mirrors.dart' as m;
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.ReflectorTest(): r.ReflectorData(
      <m.TypeMirror>[
        r.NonGenericClassMirrorImpl(
            r'Person',
            r'.Person',
            134217735,
            0,
            const prefix0.ReflectorTest(),
            const <int>[0, 1, 2, 3, 4, 15],
            const <int>[16, 17, 18, 19, 20, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bool b) => () => b ? prefix1.Person() : null},
            0,
            0,
            const <int>[],
            const <Object>[prefix0.reflector],
            null)
      ],
      <m.DeclarationMirror>[
        r.VariableMirrorImpl(
            r'identifier',
            134348805,
            0,
            const prefix0.ReflectorTest(),
            -1,
            1,
            1, const <int>[], const <Object>[
          const prefix2.PrimaryKey(),
          const prefix3.CheckNumberRange(minimum: 0, maximum: 999)
        ]),
        r.VariableMirrorImpl(
            r'name',
            134348805,
            0,
            const prefix0.ReflectorTest(),
            -1,
            2,
            2, const <int>[], const <Object>[
          const prefix4.CheckTextLength(minimum: 3, maximum: 99)
        ]),
        r.VariableMirrorImpl(
            r'age',
            134348805,
            0,
            const prefix0.ReflectorTest(),
            -1,
            1,
            1, const <int>[], const <Object>[
          const prefix3.CheckNumberRange(minimum: 18, maximum: 99)
        ]),
        r.VariableMirrorImpl(
            r'salary',
            134348805,
            0,
            const prefix0.ReflectorTest(),
            -1,
            3,
            3,
            const <int>[],
            const <Object>[const prefix3.CheckNumberRange(maximum: 99999)]),
        r.VariableMirrorImpl(
            r'isBoss',
            134348805,
            0,
            const prefix0.ReflectorTest(),
            -1,
            4,
            4,
            const <int>[],
            const <Object>[const prefix5.FormalName('is he an idiot?')]),
        r.ImplicitGetterMirrorImpl(const prefix0.ReflectorTest(), 0, 5),
        r.ImplicitSetterMirrorImpl(const prefix0.ReflectorTest(), 0, 6),
        r.ImplicitGetterMirrorImpl(const prefix0.ReflectorTest(), 1, 7),
        r.ImplicitSetterMirrorImpl(const prefix0.ReflectorTest(), 1, 8),
        r.ImplicitGetterMirrorImpl(const prefix0.ReflectorTest(), 2, 9),
        r.ImplicitSetterMirrorImpl(const prefix0.ReflectorTest(), 2, 10),
        r.ImplicitGetterMirrorImpl(const prefix0.ReflectorTest(), 3, 11),
        r.ImplicitSetterMirrorImpl(const prefix0.ReflectorTest(), 3, 12),
        r.ImplicitGetterMirrorImpl(const prefix0.ReflectorTest(), 4, 13),
        r.ImplicitSetterMirrorImpl(const prefix0.ReflectorTest(), 4, 14),
        r.MethodMirrorImpl(r'', 64, 0, -1, 0, 0, const <int>[], const <int>[],
            const prefix0.ReflectorTest(), const []),
        r.MethodMirrorImpl(r'==', 2097154, -1, -1, 4, 4, const <int>[],
            const <int>[5], const prefix0.ReflectorTest(), const []),
        r.MethodMirrorImpl(r'toString', 2097154, -1, -1, 2, 2, const <int>[],
            const <int>[], const prefix0.ReflectorTest(), const []),
        r.MethodMirrorImpl(
            r'noSuchMethod',
            524290,
            -1,
            -1,
            -1,
            -1,
            const <int>[],
            const <int>[6],
            const prefix0.ReflectorTest(),
            const []),
        r.MethodMirrorImpl(r'hashCode', 2097155, -1, -1, 1, 1, const <int>[],
            const <int>[], const prefix0.ReflectorTest(), const []),
        r.MethodMirrorImpl(r'runtimeType', 2097155, -1, -1, 5, 5, const <int>[],
            const <int>[], const prefix0.ReflectorTest(), const [])
      ],
      <m.ParameterMirror>[
        r.ParameterMirrorImpl(
            r'_identifier',
            134348902,
            6,
            const prefix0.ReflectorTest(),
            -1,
            1,
            1,
            const <int>[],
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'_name',
            134348902,
            8,
            const prefix0.ReflectorTest(),
            -1,
            2,
            2,
            const <int>[],
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'_age',
            134348902,
            10,
            const prefix0.ReflectorTest(),
            -1,
            1,
            1,
            const <int>[],
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'_salary',
            134348902,
            12,
            const prefix0.ReflectorTest(),
            -1,
            3,
            3,
            const <int>[],
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'_isBoss',
            134348902,
            14,
            const prefix0.ReflectorTest(),
            -1,
            4,
            4,
            const <int>[],
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'other',
            134348806,
            16,
            const prefix0.ReflectorTest(),
            -1,
            6,
            6,
            const <int>[],
            const [],
            null,
            null),
        r.ParameterMirrorImpl(
            r'invocation',
            134348806,
            18,
            const prefix0.ReflectorTest(),
            -1,
            7,
            7,
            const <int>[],
            const [],
            null,
            null)
      ],
      <Type>[
        prefix1.Person,
        int,
        String,
        double,
        bool,
        Type,
        Object,
        Invocation
      ],
      1,
      {
        r'==': (dynamic instance) => (x) => instance == x,
        r'toString': (dynamic instance) => instance.toString,
        r'noSuchMethod': (dynamic instance) => instance.noSuchMethod,
        r'hashCode': (dynamic instance) => instance.hashCode,
        r'runtimeType': (dynamic instance) => instance.runtimeType,
        r'identifier': (dynamic instance) => instance.identifier,
        r'name': (dynamic instance) => instance.name,
        r'age': (dynamic instance) => instance.age,
        r'salary': (dynamic instance) => instance.salary,
        r'isBoss': (dynamic instance) => instance.isBoss
      },
      {
        r'identifier=': (dynamic instance, value) =>
            instance.identifier = value,
        r'name=': (dynamic instance, value) => instance.name = value,
        r'age=': (dynamic instance, value) => instance.age = value,
        r'salary=': (dynamic instance, value) => instance.salary = value,
        r'isBoss=': (dynamic instance, value) => instance.isBoss = value
      },
      <m.LibraryMirror>[
        r.LibraryMirrorImpl(
            r'',
            Uri.parse('asset:maxi_library_db_sqlite/test/models/person.dart'),
            const prefix0.ReflectorTest(),
            const <int>[],
            {},
            {},
            const [],
            null)
      ],
      [])
};

final _memberSymbolMap = null;

void initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
